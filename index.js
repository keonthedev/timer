import Head from 'next/head'
import { useState } from 'react'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import App from './_app'
const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [displayTime, setDisplayTime] = useState(25 * 60);
  const [breakTime, setBreakTime] = useState(5 * 60);
  const [sessionTime, setSessionTime] = useState(25 * 60);
  const [timerOn, setTimerOn] = useState(false);
  const [onBreak, setOnBreak] = useState(false);
  //const [breakAudio, setBreakAudio] = useState(new Audio('./beep.mp3'));

  // const playSound = () => {breakAudio.currentTime = 0; breakAudio.play()}

  const formatTime = (time) => {
    let minutes = Math.floor(time/60);
    let seconds = time % 60;

    return (minutes < 10 ? '0' + minutes : minutes) + ":" + (seconds < 10 ? '0' + seconds : seconds)
  }

    const changeTime = (amount, type) => {
      if (type === 'break') {
        if(breakTime <= 60 && amount < 0) {
          return;
        }
        setBreakTime(prev => prev + amount)
      } else {
        if (sessionTime <= 60 && amount < 0) {
          return;
        }
        setSessionTime((prev) => prev + amount)
        if (!timerOn) {
          setDisplayTime(sessionTime + amount)
        }
      }
    }
    const controlTime = () => {
      let second = 1000;
      let date = new Date().getTime();
      let nextDate = new Date().getTime() + second;
      let onBreakVariable = onBreak;

      if (!timerOn) {
        let interval = setInterval(() => {
          date = new Date().getTime();
          if (date > nextDate) {
            setDisplayTime(prev => {
              if (prev <=  0 && !onBreak) {
                //playSound();
                onBreakVariable = true;
                setOnBreak(true);
                return breakTime;
              } else if (prev <= 0 && onBreak) {
               // playSound();
                onBreakVariable = false;
                setOnBreak(false);
                return sessionTime;
              }
              return prev - 1;
            })
            nextDate += second
          }
        }, 30);
        localStorage.clear();
        localStorage.setItem('interval-id', interval)
      }
      if (timerOn) {
        clearInterval(localStorage.getItem('interval-id'))
      }
      setTimerOn(!timerOn)
    };


    const resetTime = () => {
      setDisplayTime(25*60);
      setBreakTime(5*60);
      setSessionTime(25*60);
    }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" 
        href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/css/materialize.min.css" 
        integrity="sha512-17AHGe9uFHHt+QaRYieK7bTdMMHBMi8PeWG99Mf/xEcfBLDCn0Gze8Xcx1KoSZxDnv+KnCC+os/vuQ7jrF/nkw==" 
        crossorigin="anonymous" 
        referrerpolicy="no-referrer" />
      </Head>
      <main>
        <div>
          <h1 id='titleName'>25 + 5 Timer</h1>
          <div  className='dual-container'>
            <Length title="break-length" 
              changeTime={changeTime} 
              type={"break"} 
              time={breakTime} 
              formatTime={formatTime}/>
            <Length title="session-length" 
              changeTime={changeTime} 
              type={"session"} 
              time={sessionTime} 
              formatTime={formatTime}/>
          </div>
          <h3>{onBreak ? "Break" : "Session"}</h3>
          <h1>{formatTime(displayTime)}</h1>
          <button id='playpause' onClick={controlTime}>
            {timerOn ? (
              <i className='material-icons'>pause</i>
            ) : (
              <i className='material-icons'>play</i>
            )}
          </button>
          <button id='playpause' onClick={resetTime}>
            <i className='material-icons texts'>Reset</i>
          </button>
        </div>
        
      </main>
    </>
  )
}

function Length ({title, changeTime, type, time, formatTime}) {
  return (
    <div>
      <h3>{title}</h3>
        <div className='time-sets'>
          <button onClick={() => changeTime(-60, type)}>down</button>
          <h3>{formatTime(time)}</h3>
          <button onClick={() => changeTime(60, type)}>up</button>
        </div>
    </div>
  )
}
